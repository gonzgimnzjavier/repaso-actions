name: Build & Push

on:
  # Permite ejecutar el workflow manualmente
  workflow_dispatch: {}
  # Se dispara automáticamente cuando se hace push a la rama "test"
  push:
    branches: [ "test" ]

jobs:
  build-and-push:
    # Se ejecuta en un runner self-hosted (asegúrate de que tu runner tenga la etiqueta "self-hosted")
    runs-on: self-hosted

    steps:
      # 1. Clonar el repositorio (el repo donde tienes el index.html y el Dockerfile)
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Login en Docker Hub usando la acción oficial.
      #     Asegúrate de definir en los secrets de tu repo:
      #       DOCKERHUB_USERNAME (tu usuario en Docker Hub)
      #       DOCKERHUB_TOKEN (tu contraseña o token)
      - name: Docker Hub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 3 y 4. Construir la imagen a partir del Dockerfile y pushearla a Docker Hub con el tag "latest"
      #     El nombre "foobar/daw-web" debe coincidir con el repositorio creado en Docker Hub
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: javigongimenez/daw-web:latest

      # 5. Levantar el contenedor en el puerto 8888 desde la imagen recién subida.
      #    Este step se ejecuta en tu máquina (runner self-hosted).
      - name: Run Docker Container
        run: |
          # Opcional: si ya existe un contenedor en ejecución con ese nombre, se puede detener y eliminar
          docker rm -f daw-web-container || true
          # Inicia el contenedor en segundo plano (-d) mapeando el puerto 80 del contenedor al 8888 de tu máquina
          docker run -d --name daw-web-container -p 8888:80 javigongimenez/daw-web:latest
